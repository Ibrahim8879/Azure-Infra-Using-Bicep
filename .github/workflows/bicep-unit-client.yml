name: 'Clients Workflow'

on:
  workflow_call:
    inputs:
      labels:
        required: true
        type: string
      files:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

env:
  LOCATION: "southcentralus"

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write
  security-events: write

jobs:
  client-job:
    name: 'Client Tests'
    runs-on: ubuntu-latest
    if: contains(join(fromJSON(inputs.labels), ' '), 'client-')
    steps:
      - uses: actions/checkout@v3

      # Prepare secrets for Clients
      - name: Create talosSecrets.json and escape it
        run: |
          echo '${{ secrets.TALOS_KEYVAULT_SECRETS }}' > talosSecrets.json
          TALOS_SECRETS_ESCAPED=$(cat talosSecrets.json | jq -c .)
          echo "::add-mask::$TALOS_SECRETS_ESCAPED"
          echo "TALOS_SECRETS_ESCAPED=$TALOS_SECRETS_ESCAPED" >> $GITHUB_ENV

      # Authenticate with OIDC
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Run for each client-* label
      - name: Run client deployments
        run: |
          labels=$(echo '${{ inputs.labels }}' | jq -r '.[]' | grep '^client-' || true)
          files=$(echo '${{ inputs.files }}' | jq -r '.[]')

          for label in $labels; do
            client_name="${label#client-}"
            bicep_file="src/iac/az-controllers/azure-services/client/${client_name}.bicep"
            param_file="src/params/dev/${client_name}.bicepparam"

            if grep -q "$bicep_file" <<< "$files" || grep -q "$param_file" <<< "$files"; then
              echo "🚀 Running deployment for client: $client_name"

              # Lint
              az bicep build --file "$bicep_file"

              # Validate
              az deployment sub validate \
                --name validate-${{ github.run_id }}-$client_name \
                --template-file "$bicep_file" \
                --parameters "$param_file" \
                --parameters talosSecrets="$TALOS_SECRETS_ESCAPED" location=$LOCATION \
                --location $LOCATION

              # Security Scan
              checkov -d "$bicep_file" --framework bicep --skip-check CKV_AZURE_225,CKV_AZURE_59,CKV_AZURE_12,CKV_AZURE_222,CKV_AZURE_166,CKV_AZURE_139
            else
              echo "❌ ERROR: Label '$label' given but no matching file changes for $client_name"
              exit 1
            fi
          done
